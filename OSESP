pragma solidity 0.5.8;

contract OSESPConcertos {
    
    address payable _Diretor;
    address payable _Osesp;
    address payable _Advogado;
    uint256 constant _ParticipacaoAdvogado = 20;
    uint256 constant _ParticipacaoOsesp = 50;
    uint256 constant _ParticipacaoDiretor = 30;
    uint256 _DataDoConcerto = now+120; //1564689600 01/08/2019 às 20h00
    uint constant ValorDoIngresso = 1000;
    event ValoresDistribuidos (uint HA, uint HO, uint HD);
    
    
     
   modifier Diretor(){
        require (msg.sender == _Diretor, "Operação não permitida");
        _;
        
    }
    
    constructor (
        address payable CarteiraDiretor,
        address payable CarteiraOsesp,
        address payable CarteiraAdvogado
        )
    
        public {
            
        _Diretor = CarteiraDiretor;
        _Osesp = CarteiraOsesp;
        _Advogado = CarteiraAdvogado;
       
        
    }
  
    function VendaDeIngresso (address) public payable {
        require (now < _DataDoConcerto, "Ingressos Esgotados");
        uint A = ValorDoIngresso;
        require (msg.value >= A, "O preco e BRL1000");
    
    }
    
      
    function ArrecadacaoFinal() public Diretor view returns (uint)  {
       return (address(this).balance);
    }
    
    function Distribuicao() public Diretor  {
        require (now>_DataDoConcerto, "Aguarde o inicio do Concerto");
        uint HA = ((_ParticipacaoDiretor) * address(this).balance);
        uint HO = ((_ParticipacaoAdvogado) * address(this).balance);
        uint HD = ((_ParticipacaoDiretor) * address(this).balance);
        
        
       _Diretor.transfer((HD)/100);
       _Advogado.transfer((HA)/100);
       _Osesp.transfer((HO/100));
       
      emit ValoresDistribuidos (HA, HO, HD);
       
      
   
    }
    
    
}
