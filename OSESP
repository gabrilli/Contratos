pragma solidity 0.5.8;

contract OSESPConcertos {
    
    address payable _Diretor;
    address payable _Osesp;
    address payable _Advogado;
    uint256 constant _ParticipacaoAdvogado = 20;
    uint256 constant _ParticipacaoOsesp = 50;
    uint256 constant _ParticipacaoDiretor = 30;
    uint256 _DataDoConcerto = 1557777815; //1564689600 01/08/2019 às 20h00
    uint constant ValorDoIngresso = 1000;
    
    
     event CompraEfetuadaComSucesso (uint BRL);
    
  
   modifier EventoFinalizado(){
        require (msg.sender == _Diretor, "Operação não permitida");
        _;
        
    }
    
    constructor (
        address payable CarteiraDiretor,
        address payable CarteiraOsesp,
        address payable CarteiraAdvogado
        )
    
        public {
            
        _Diretor = CarteiraDiretor;
        _Osesp = CarteiraOsesp;
        _Advogado = CarteiraAdvogado;
       
        
    }
  
    function VendaDeIngresso (address) public payable {
        require (now < _DataDoConcerto, "Ingressos Esgotados");
    
    }
    
      
    function ArrecadacaoFinal() public view returns (uint) {
        require (msg.sender == _Diretor);
        return (address(this).balance);
    }
    
    function Distribuicao() public EventoFinalizado  {
        require (now>_DataDoConcerto, "Aguarde o inicio do Concerto");
             
       _Diretor.transfer((_ParticipacaoDiretor/100) * address(this).balance);
       _Advogado.transfer((_ParticipacaoAdvogado/100) * address(this).balance);
       _Osesp.transfer ((_ParticipacaoOsesp/100) * address(this).balance);
      
   
    }
    
    
}
