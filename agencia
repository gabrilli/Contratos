pragma solidity 0.5.8;

    contract AgenciaViagem {
        
        address payable public _Agencia;
        address payable public _CiaArea;
        uint256 public _ValorDaPassagem;
        uint256 public _CapacidadeAeronave;
        bool public Encerrado;
        
       
        
        struct Interessado {
            address payable Cliente;
            string Nome;
            bool Reembolso;
            uint256 VP;
        }
        
        Interessado[] public ListaA;
        
        mapping(address => Interessado) private ListaM;

        
        
    constructor (
        address payable CiaAerea,
        uint256 ValorDaPassagem,
        address payable Agencia,
        uint256 CapacidadeAeronave
        )
    
    public {
        _Agencia = Agencia;
        _CiaArea = CiaAerea;
        _ValorDaPassagem = ValorDaPassagem;
        _CapacidadeAeronave = CapacidadeAeronave;
        
    }
    
  
    
    modifier AutorizacaoDeEmbarque () {
        require (msg.sender == _Agencia, "Aguarde o chamado da Agencia");
        _;
    }
    
    
    function FazerReserva (address payable Cliente, string memory Nome, bool Reembolso, uint256 VP) public payable  {
        
       
        require (msg.value == _ValorDaPassagem, "Pague o valor correto");
        
        Interessado memory Passageiro = Interessado(Cliente, Nome, Reembolso, VP);
        
        ListaA.push(Passageiro);
        
        ListaM[Cliente] = Passageiro;
    }    
        
   
    function EncerrarLista () public  {
        
        require (msg.sender == _Agencia, "Somente Agencia pode encerrar a Lista");
        
        Encerrado = true;
    }    
        
    function EstornoEPagamento () public payable {
        
        require (msg.sender == _Agencia);
        require (Encerrado = true);
        
        
       for (uint256 i=_CapacidadeAeronave; i>=ListaA.length ; i++) {
          
           Interessado memory PassageiroDescartado = ListaA[i];
           
           if (PassageiroDescartado.Reembolso) {
               PassageiroDescartado.Cliente.transfer(PassageiroDescartado.VP);
               
               
               
           }
           
           
           
           //PassageiroDescartado.Cliente.transfer(PassageiroDescartado.A);
           
           
           
       }
        
        
    }
        
        
    
      
