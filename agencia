pragma solidity 0.5.8;

    contract AgenciaViagem {
        
        address payable public _Agencia;
        address payable public _CiaArea;
        uint256 public _ValorDaPassagem;
        uint256 public _CapacidadeAeronave;
       
        
        struct Interessado {
            address Cliente;
            string Nome;
        }
        
        Interessado[] public ListaPassageiros1;
        mapping(address => Interessado) private ListaPassageiros2;
        mapping (string => Interessado) public NomeInteressado;
        
        
  
        
        
    constructor (
        address payable CiaAerea,
        uint256 ValorDaPassagem,
        address payable Agencia,
        uint256 CapacidadeAeronave
        )
    
    public {
        _Agencia = msg.sender;
        _CiaArea = CiaAerea;
        _ValorDaPassagem = ValorDaPassagem;
        _CapacidadeAeronave = CapacidadeAeronave;
        
    }
    
  
    
    modifier AutorizacaoDeEmbarque () {
        require (msg.sender == _Agencia, "Aguarde o chamado da Agencia");
        _;
    }
    
    
    function FazerReserva (address Cliente, string memory Nome) public payable {
        require (msg.value == _ValorDaPassagem, "Pague o valor correto");
        Interessado memory Passageiro = Interessado(Cliente, Nome);
        
        ListaPassageiros1.push(Passageiro);
        NomeInteressado[Nome] = Passageiro;
    }    
        
    function Lista () public view returns () {
        return NomeInteressado.Nome;
    }
        
        
       
        
            
            
             
       
        
        
       
        
        
        
}
